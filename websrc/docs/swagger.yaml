basePath: /
definitions:
  models.BackupTask:
    properties:
      dummy:
        $ref: '#/definitions/models.GenFileParams'
      operationId:
        type: string
      sourceFilter:
        $ref: '#/definitions/models.ObjectFilterParams'
      sourcePoint:
        $ref: '#/definitions/models.ProviderConfig'
      targetPoint:
        $ref: '#/definitions/models.ProviderConfig'
    type: object
  models.BasicDataTask:
    properties:
      dummy:
        $ref: '#/definitions/models.GenFileParams'
      sourceFilter:
        $ref: '#/definitions/models.ObjectFilterParams'
      sourcePoint:
        $ref: '#/definitions/models.ProviderConfig'
      targetPoint:
        $ref: '#/definitions/models.ProviderConfig'
    type: object
  models.BasicResponse:
    properties:
      Error:
        type: string
      Result:
        type: string
    type: object
  models.CredentialCreateRequest:
    type: object
  models.DataTask:
    properties:
      dummy:
        $ref: '#/definitions/models.GenFileParams'
      operationId:
        type: string
      sourceFilter:
        $ref: '#/definitions/models.ObjectFilterParams'
      sourcePoint:
        $ref: '#/definitions/models.ProviderConfig'
      targetPoint:
        $ref: '#/definitions/models.ProviderConfig'
    type: object
  models.GenFileParams:
    properties:
      checkCSV:
        type: boolean
      checkGIF:
        type: boolean
      checkJSON:
        type: boolean
      checkPNG:
        type: boolean
      checkSQL:
        type: boolean
      checkServerJSON:
        type: boolean
      checkServerSQL:
        type: boolean
      checkTXT:
        type: boolean
      checkXML:
        type: boolean
      checkZIP:
        type: boolean
      sizeCSV:
        type: string
      sizeGIF:
        type: string
      sizeJSON:
        type: string
      sizePNG:
        type: string
      sizeSQL:
        type: string
      sizeServerJSON:
        type: string
      sizeServerSQL:
        type: string
      sizeTXT:
        type: string
      sizeXML:
        type: string
      sizeZIP:
        type: string
    type: object
  models.GenarateTask:
    properties:
      dummy:
        $ref: '#/definitions/models.GenFileParams'
      operationId:
        type: string
      tag:
        items:
          type: string
        type: array
      targetPoint:
        $ref: '#/definitions/models.ProviderConfig'
    type: object
  models.MigrateTask:
    properties:
      dummy:
        $ref: '#/definitions/models.GenFileParams'
      operationId:
        type: string
      sourceFilter:
        $ref: '#/definitions/models.ObjectFilterParams'
      sourcePoint:
        $ref: '#/definitions/models.ProviderConfig'
      targetPoint:
        $ref: '#/definitions/models.ProviderConfig'
    type: object
  models.ObjectFilterParams:
    properties:
      contains:
        items:
          type: string
        type: array
      exact:
        items:
          type: string
        type: array
      maxSize:
        type: number
      minSize:
        type: number
      modifiedAfter:
        type: string
      modifiedBefore:
        type: string
      path:
        type: string
      sizeFilteringUnit:
        type: string
      suffixes:
        items:
          type: string
        type: array
    type: object
  models.ProviderConfig:
    properties:
      bucket:
        type: string
      credentialId:
        type: integer
      databaseId:
        type: string
      databaseName:
        type: string
      endpoint:
        type: string
      host:
        type: string
      password:
        type: string
      path:
        type: string
      port:
        type: string
      projectId:
        type: string
      provider:
        type: string
      region:
        type: string
      username:
        type: string
    type: object
  models.RestoreTask:
    properties:
      dummy:
        $ref: '#/definitions/models.GenFileParams'
      operationId:
        type: string
      sourceFilter:
        $ref: '#/definitions/models.ObjectFilterParams'
      sourcePoint:
        $ref: '#/definitions/models.ProviderConfig'
      targetPoint:
        $ref: '#/definitions/models.ProviderConfig'
    type: object
  models.Schedule:
    properties:
      ScheduleID:
        type: string
      ScheduleName:
        type: string
      cron:
        type: string
      operationId:
        type: string
      startTime:
        type: string
      status:
        $ref: '#/definitions/models.Status'
      tag:
        items:
          type: string
        type: array
      tasks:
        items:
          $ref: '#/definitions/models.BasicDataTask'
        type: array
      tz:
        type: string
    type: object
  models.Status:
    enum:
    - active
    - inactive
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - StatusActive
    - StatusInactive
    - StatusPending
    - StatusCompleted
    - StatusFailed
  models.Task:
    properties:
      operationId:
        type: string
      tag:
        items:
          type: string
        type: array
    type: object
info:
  contact:
    email: contact-to-cloud-barista@googlegroups.com
    name: API Support
    url: http://cloud-barista.github.io
  description: MC-Data-Manager REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: MC-Data-Manager REST API
  version: latest
paths:
  /backup:
    get:
      description: Retrieve a list of all Tasks in the system.
      operationId: GetAllBackupHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all Tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get all Tasks
      tags:
      - '[Backup]'
  /backup/{id}:
    delete:
      description: Delete an existing Task using its ID.
      operationId: DeleteBackupkHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a Task
      tags:
      - '[Backup]'
    get:
      consumes:
      - application/json
      description: Get the details of a Task using its ID.
      operationId: GetBackupHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved a Task
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get a Task by ID
      tags:
      - '[Backup]'
    put:
      consumes:
      - application/json
      description: Update the details of an existing Task using its ID.
      operationId: UpdateBackupHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Parameters required for updating a Task
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Update an existing Task
      tags:
      - '[Backup]'
  /backup/nrdbms:
    post:
      consumes:
      - application/json
      description: Export data from a MySQL database to SQL files.
      operationId: BackupNRDBPostHandler
      parameters:
      - description: Parameters required for backup
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.BackupTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully backup data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Export data from MySQL
      tags:
      - '[Backup]'
  /backup/objectstorage:
    post:
      consumes:
      - application/json
      description: Export data from a objectstorage  to files.
      operationId: BackupOSPostHandler
      parameters:
      - description: Parameters required for backup
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.BackupTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully backup data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Export data from objectstorage
      tags:
      - '[Backup]'
  /backup/rdbms:
    post:
      consumes:
      - application/json
      description: Export data from a MySQL database to SQL files.
      operationId: BackupRDBPostHandler
      parameters:
      - description: Parameters required for backup
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.BackupTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully backup data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Export data from MySQL
      tags:
      - '[Backup]'
  /credentials:
    get:
      description: Retrieve a list of all credentials in the system.
      operationId: ListCredentialsHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all credentials
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get all credentials
      tags:
      - '[Credential]'
    post:
      consumes:
      - application/json
      description: save encrypted credential.
      operationId: CreateCredentialHandler
      parameters:
      - description: Parameters required for Credential
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.CredentialCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully saved credential
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: save encrypted credential.
      tags:
      - '[Credential]'
  /credentials/{id}:
    delete:
      description: Delete an existing credential using its ID.
      operationId: DeleteCredentialHandler
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Credential
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Credential not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a credential
      tags:
      - '[Credential]'
    get:
      consumes:
      - application/json
      description: Get the details of a Credential using its ID.
      operationId: GetCredentialHandler
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved credential
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get a Credential by ID
      tags:
      - '[Credential]'
  /generate:
    get:
      description: Retrieve a list of all Tasks in the system.
      operationId: GetAllGenerateHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all Tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get all Tasks
      tags:
      - '[Generate]'
  /generate/{id}:
    delete:
      description: Delete an existing Task using its ID.
      operationId: DeleteGeneratekHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a Task
      tags:
      - '[Generate]'
    get:
      consumes:
      - application/json
      description: Get the details of a Task using its ID.
      operationId: GetGenerateHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved a Task
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get a Task by ID
      tags:
      - '[Generate]'
    put:
      consumes:
      - application/json
      description: Update the details of an existing Task using its ID.
      operationId: UpdateGenerateHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Parameters required for updating a Task
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Update an existing Task
      tags:
      - '[Generate]'
  /generate/linux:
    post:
      consumes:
      - application/json
      description: Generate test data on on-premise Linux.
      operationId: GenerateLinuxPostHandler
      parameters:
      - description: Parameters required to generate test data
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.DataTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated test data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Generate test data on on-premise Linux
      tags:
      - '[Generate]'
  /generate/nrdbms:
    post:
      consumes:
      - application/json
      description: Generate test data on Object Storage
      operationId: GenerateNRDBMSPostHandler
      parameters:
      - description: Parameters required to generate test data
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.GenarateTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated test data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Generate test data on Object Storage
      tags:
      - '[Generate]'
  /generate/objectstorage:
    post:
      consumes:
      - application/json
      description: Generate test data on Object Storage
      operationId: GenerateObjectStoragePostHandler
      parameters:
      - description: Parameters required to generate test data
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.GenarateTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated test data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Generate test data on Object Storage
      tags:
      - '[Generate]'
  /generate/rdbms:
    post:
      consumes:
      - application/json
      description: Generate test data on RDBMS
      operationId: GenerateRDBMSPostHandler
      parameters:
      - description: Parameters required to generate test data
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.GenarateTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated test data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Generate test data on RDBMS
      tags:
      - '[Generate]'
  /generate/windows:
    post:
      consumes:
      - application/json
      description: Generate test data on on-premise Windows.
      operationId: GenerateWindowsPostHandler
      parameters:
      - description: Parameters required to generate test data
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.DataTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated test data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Generate test data on on-premise Windows
      tags:
      - '[Generate]'
  /migrate:
    get:
      description: Retrieve a list of all Tasks in the system.
      operationId: GetAllMigrateHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all Tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get all Tasks
      tags:
      - '[Migrate]'
  /migrate/{id}:
    delete:
      description: Delete an existing Task using its ID.
      operationId: DeleteMigratekHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a Task
      tags:
      - '[Migrate]'
    get:
      consumes:
      - application/json
      description: Get the details of a Task using its ID.
      operationId: GetMigrateHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved a Task
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get a Task by ID
      tags:
      - '[Migrate]'
    put:
      consumes:
      - application/json
      description: Update the details of an existing Task using its ID.
      operationId: UpdateMigrateHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Parameters required for updating a Task
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Update an existing Task
      tags:
      - '[Migrate]'
  /migrate/nrdbms:
    post:
      consumes:
      - application/json
      description: Migrate data from NRDBMS to NRDBMS.
      operationId: MigrationNRDBMSPostHandler
      parameters:
      - description: Parameters required for migration
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.MigrateTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Migrate data from NRDBMS to NRDBMS
      tags:
      - '[Migrate]'
  /migrate/objectstorage:
    post:
      consumes:
      - application/json
      description: Migrate data from ObjectStorage to ObjectStorage.
      operationId: MigrationObjectstoragePostHandler
      parameters:
      - description: Parameters required for migration
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.MigrateTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Migrate data from ObjectStorage to ObjectStorage
      tags:
      - '[Migrate]'
  /migrate/rdbms:
    post:
      consumes:
      - application/json
      description: Migrate data from RDBMS to RDBMS.
      operationId: MigrationRDBMSPostHandler
      parameters:
      - description: Parameters required for migration
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.MigrateTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Migrate data from RDBMS to RDBMS
      tags:
      - '[Migrate]'
  /readyZ:
    get:
      description: Get System Ready
      operationId: GetSystemReadyHandler
      produces:
      - application/json
      responses:
        "200":
          description: System is Ready
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: 'Profile Load , Failed: err'
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get System Ready Handler
      tags:
      - '[Already Check System]'
  /restore:
    get:
      description: Retrieve a list of all Tasks in the system.
      operationId: GetAllRestoreHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all Tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get all Tasks
      tags:
      - '[Restore]'
  /restore/{id}:
    delete:
      description: Delete an existing Task using its ID.
      operationId: DeleteRestorekHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a Task
      tags:
      - '[Restore]'
    get:
      consumes:
      - application/json
      description: Get the details of a Task using its ID.
      operationId: GetRestoreHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved a Task
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get a Task by ID
      tags:
      - '[Restore]'
    put:
      consumes:
      - application/json
      description: Update the details of an existing Task using its ID.
      operationId: UpdateRestoreHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Parameters required for updating a Task
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Update an existing Task
      tags:
      - '[Restore]'
  /restore/nrdbms:
    post:
      consumes:
      - application/json
      description: Restore NoSQL from SQL files to a NoSQL database
      operationId: RestoreNRDBPostHandler
      parameters:
      - description: Parameters required for Restore
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.RestoreTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully Restore data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Restore NoSQL from data to NoSQL
      tags:
      - '[Restore]'
  /restore/objectstorage:
    post:
      consumes:
      - application/json
      description: Restore objectstorage from files to a objectstorage
      operationId: RestoreOSPostHandler
      parameters:
      - description: Parameters required for Restore
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.RestoreTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully Restore data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Restore data from objectstorage
      tags:
      - '[Restore]'
  /restore/rdbms:
    post:
      consumes:
      - application/json
      description: Restore MySQL from MySQL files to a MySQL database
      operationId: RestoreRDBPostHandler
      parameters:
      - description: Parameters required for Restore
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.RestoreTask'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully Restore data
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Restore data from MySQL
      tags:
      - '[Restore]'
  /schedule:
    get:
      description: Retrieve a list of all Schedules in the system.
      operationId: GetAllSchedulesHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all Schedules
          schema:
            items:
              $ref: '#/definitions/models.Schedule'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get all Schedules
      tags:
      - '[Schedule]'
    post:
      consumes:
      - application/json
      description: Create a new Schedule and store it in the system.
      operationId: CreateScheduleHandler
      parameters:
      - description: Parameters required for creating a Schedule
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created a Schedule
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Create a new Schedule
      tags:
      - '[Schedule]'
  /schedule/{id}:
    delete:
      description: Delete an existing Schedule using its ID.
      operationId: DeleteScheduleHandler
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the Schedule
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a Schedule
      tags:
      - '[Schedule]'
    get:
      consumes:
      - application/json
      description: Get the details of a Schedule using its ID.
      operationId: GetScheduleHandler
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved a Schedule
          schema:
            $ref: '#/definitions/models.Schedule'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get a Schedule by ID
      tags:
      - '[Schedule]'
    put:
      consumes:
      - application/json
      description: Update the details of an existing Schedule using its ID.
      operationId: UpdateScheduleHandler
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: string
      - description: Parameters required for updating a Schedule
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the Schedule
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Update an existing Schedule
      tags:
      - '[Schedule]'
  /service/apply:
    post:
      description: Execute the apply.sh script to set up resources.
      operationId: applyResourceHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully applied resources
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Failed to apply resources
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Apply Resources
      tags:
      - '[Service]'
  /service/clearAll:
    delete:
      description: Delete an All Service and Task.
      operationId: DeleteServiceAndTaskAllHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the All Service
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Clear All Task , Failed
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a Task
      tags:
      - '[Service]'
  /service/destroy:
    delete:
      description: Execute the destroy.sh script to destroy resources.
      operationId: destroyResourceHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully destroyed resources
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Failed to destroy resources
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Destroy Resources
      tags:
      - '[Service]'
  /tasks:
    get:
      description: Retrieve a list of all Tasks in the system.
      operationId: GetAllTasksHandler
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all Tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get all Tasks
      tags:
      - '[Task]'
    post:
      consumes:
      - application/json
      description: Create a new Task and store it in the system.
      operationId: CreateTaskHandler
      parameters:
      - description: Parameters required for creating a Task
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created a Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Create a new Task
      tags:
      - '[Task]'
  /tasks/{id}:
    delete:
      description: Delete an existing Task using its ID.
      operationId: DeleteTaskHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Delete a Task
      tags:
      - '[Task]'
    get:
      consumes:
      - application/json
      description: Get the details of a Task using its ID.
      operationId: GetTaskHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved a Task
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Get a Task by ID
      tags:
      - '[Task]'
    put:
      consumes:
      - application/json
      description: Update the details of an existing Task using its ID.
      operationId: UpdateTaskHandler
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Parameters required for updating a Task
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the Task
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.BasicResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicResponse'
      summary: Update an existing Task
      tags:
      - '[Task]'
swagger: "2.0"
